type token =
  | INT of (int)
  | CHAR of (char)
  | PLUS
  | MINUS
  | MULT
  | DIV
  | OPEN
  | CLOSE
  | EOL
  | EOF
  | LAMBDA
  | DOT
  | SUCC
  | ADDITION
  | MULTIPLY

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
	open Simplification
	open Lambda_type
	open Lib 
	open Core.Std
	exception Unrecognised_syntax of string
# 27 "parser.ml"
let yytransl_const = [|
  259 (* PLUS *);
  260 (* MINUS *);
  261 (* MULT *);
  262 (* DIV *);
  263 (* OPEN *);
  264 (* CLOSE *);
  265 (* EOL *);
    0 (* EOF *);
  266 (* LAMBDA *);
  267 (* DOT *);
  268 (* SUCC *);
  269 (* ADDITION *);
  270 (* MULTIPLY *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* CHAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\001\000\001\000\002\000\002\000\002\000\001\000\001\000\002\000\
\004\000\003\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\006\000\007\000\000\000\000\000\001\000\000\000\
\011\000\012\000\013\000\000\000\000\000\000\000\000\000\004\000\
\005\000\000\000\010\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\018\000"

let yysindex = "\002\000\
\001\000\000\000\000\000\000\000\019\255\019\255\000\000\000\255\
\000\000\000\000\000\000\014\000\005\255\019\255\253\254\000\000\
\000\000\019\255\000\000\019\255\019\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\
\000\000\009\000\000\000\000\000\011\000"

let yygindex = "\000\000\
\000\000\255\255"

let yytablesize = 283
let yytable = "\012\000\
\007\000\015\000\001\000\013\000\014\000\003\000\004\000\020\000\
\008\000\002\000\009\000\005\000\019\000\017\000\008\000\003\000\
\009\000\010\000\021\000\003\000\004\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\008\000\000\000\009\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000\000\000\000\000\000\000\000\000\005\000\
\000\000\006\000\008\000\000\000\009\000\010\000\003\000\004\000\
\008\000\008\000\009\000\009\000\005\000\000\000\016\000\008\000\
\000\000\009\000\010\000"

let yycheck = "\001\000\
\000\000\002\001\001\000\005\000\006\000\001\001\002\001\011\001\
\000\000\000\000\000\000\007\001\008\001\000\000\010\001\000\000\
\012\001\013\001\020\000\001\001\002\001\255\255\255\255\255\255\
\255\255\007\001\255\255\255\255\010\001\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\255\255\255\255\255\255\255\255\007\001\
\255\255\009\001\010\001\255\255\012\001\013\001\001\001\002\001\
\008\001\009\001\008\001\009\001\007\001\255\255\009\001\010\001\
\255\255\012\001\013\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  OPEN\000\
  CLOSE\000\
  EOL\000\
  EOF\000\
  LAMBDA\000\
  DOT\000\
  SUCC\000\
  ADDITION\000\
  MULTIPLY\000\
  "

let yynames_block = "\
  INT\000\
  CHAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 20 "parser.mly"
           ( None )
# 182 "parser.ml"
               : Lambda_type.expr option))
; (fun __caml_parser_env ->
    Obj.repr(
# 21 "parser.mly"
           ( None )
# 188 "parser.ml"
               : Lambda_type.expr option))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 22 "parser.mly"
               ( Some _2 )
# 195 "parser.ml"
               : Lambda_type.expr option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 23 "parser.mly"
               ( Some _1 )
# 202 "parser.ml"
               : Lambda_type.expr option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 24 "parser.mly"
               ( Some _1 )
# 209 "parser.ml"
               : Lambda_type.expr option))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 28 "parser.mly"
             ( int_to_church _1 )
# 216 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 29 "parser.mly"
              ( Char _1 )
# 223 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                 ( App (_1, _2) )
# 231 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : char) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                         ( Lambda (_2, _4) )
# 239 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 32 "parser.mly"
                     ( _2 )
# 246 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 33 "parser.mly"
              ( succ )
# 252 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
                ( add )
# 258 "parser.ml"
               : 'expr))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Lambda_type.expr option)
