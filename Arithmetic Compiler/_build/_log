### Starting build.
# Target: math.ml.depends, tags: { extension:ml, file:math.ml, ocaml, ocamldep, package(core), quiet, thread }
ocamlfind ocamldep -package core -modules math.ml > math.ml.depends # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, package(core), quiet, thread }
/usr/local/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, package(core), quiet, thread }
ocamlfind ocamldep -package core -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly, tags: { extension:mly, file:parser.mly, ocaml, ocamlyacc, package(core), parser, quiet, thread }
/usr/local/bin/ocamlyacc parser.mly
+ /usr/local/bin/ocamlyacc parser.mly
16 shift/reduce conflicts.
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, package(core), quiet, thread }
ocamlfind ocamldep -package core -modules parser.mli > parser.mli.depends
# Target: lambda.ml.depends, tags: { extension:ml, file:lambda.ml, ocaml, ocamldep, package(core), quiet, thread }
ocamlfind ocamldep -package core -modules lambda.ml > lambda.ml.depends # cached
# Target: lambda.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lambda.cmo, file:lambda.ml, implem, ocaml, package(core), quiet, thread }
ocamlfind ocamlc -c -thread -package core -o lambda.cmo lambda.ml # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(core), quiet, thread }
ocamlfind ocamlc -c -thread -package core -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, package(core), quiet, thread }
ocamlfind ocamlc -c -thread -package core -o lexer.cmo lexer.ml
# Target: math.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:math.cmo, file:math.ml, implem, ocaml, package(core), quiet, thread }
ocamlfind ocamlc -c -thread -package core -o math.cmo math.ml
+ ocamlfind ocamlc -c -thread -package core -o math.cmo math.ml
File "math.ml", line 8, characters 28-29:
Error: This expression has type Lambda.expr
       but an expression was expected of type int
Command exited with code 2.
# Compilation unsuccessful.
